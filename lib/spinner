#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

SUCCESS='DONE'
FAIL='FAIL'

_spinner_cycle=(
'[ ●  ]'
'[  ● ]'
'[   ●]'
'[  ● ]'
'[ ●  ]'
'[●   ]'
)
_spinner_period='0.15s'

function _display_message() {
  local mode=${1}
  local status=${2}
  if [[ ${mode} = 'spinning' ]]; then
    status="${_spinner_cycle[$((_i%${#_spinner_cycle[@]}))]}"
    (( ++_i ))
  fi
  printf "\\r%s%$(($(tput cols)-${#_message}-8))s${status}" "${_message}"
  if [[ ${mode} = 'status' ]]; then
    printf '\n'
  fi
}

function _spinner {
  case ${1} in
    start)
      tput civis
      _i=0
      while true; do
        _display_message 'spinning'
        sleep ${_spinner_period}
      done
      ;;

    stop)
      tput cvvis
      if [[ -z ${_spinner_pid} ]]; then
        return 1
      fi
      kill "${_spinner_pid}" > /dev/null 2>&1
      if [[ ${2} = 0 ]]; then
        status="${GREEN}${SUCCESS}${RESET}"
      else
        status="${GREEN}${FAIL}${RESET}"
      fi
      _display_message 'status' "[${status}]"
      ;;

    *)
      printf 'ERROR: invalid argument, try {start/stop}' &>2
      exit 2
      ;;
  esac
}

function start_spinner() {
  if [[ ${-} = *x* ]]; then
    return
  fi
  _message="${1}"
  _display_message
  _spinner 'start' &
  _buffer="$(mktemp)"
  exec 3>&1 1>"${_buffer}"
  _spinner_pid="${!}"
  disown
}

function stop_spinner() {
  if [[ ${-} = *x* ]]; then
    return
  fi
  exec 1>&3
  _spinner 'stop' "${1}"
  unset _spinner_pid
  cat "${_buffer}"
  rm "${_buffer}"
}
