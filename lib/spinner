#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License
#
# Warning! Nested spinners are not supported.

# Source guard
[[ ! -z "${_LIB_SPINNER_SOURCED+x}" ]] && return 0
_LIB_SPINNER_SOURCED=true

. "$(dirname "${BASH_SOURCE[0]}")/traps"

_spinner_cycle=(
'[●   ]'
'[ ●  ]'
'[  ● ]'
'[   ●]'
'[  ● ]'
'[ ●  ]'
)
_spinner_period='0.15s'

if command -v tput &> /dev/null; then
  if tput cvvis &> /dev/null; then
    function _tput() {
      tput "${@}"
    }
  elif tput -T 'xterm' cvvis &> /dev/null; then
    function _tput() {
      tput -T 'xterm' "${@}"
    }
  else
    function _tput() {
      :
    }
  fi
else
  function _tput() {
    :
  }
fi

function _display_message() {
  local mode=${1-}
  local status=${2-}
  if [[ ${mode} = 'spinning' ]]; then
    status="${_spinner_cycle[$((_i%${#_spinner_cycle[@]}))]}"
    (( ++_i ))
  fi
  if [[ ${mode} != 'first' ]]; then
    printf '\e[1A'
  fi
  printf "\\r%s%$(($(_tput cols)-${#_message}-8))s${status}\\n" "${_message}"
}

function _spinner {
  case ${1} in
    start)
      _tput civis
      _i=0
      while true; do
        _display_message 'spinning'
        sleep ${_spinner_period}
      done
      ;;

    stop)
      _tput cvvis
      [[ -z "${_spinner_pid+x}" ]] && return 1
      kill "${_spinner_pid}" > /dev/null 2>&1
      if [[ ${2} = 0 ]]; then
        status="${GREEN}DONE${RESET}"
      else
        status="${GREEN}FAIL${RESET}"
      fi
      _display_message 'status' "[${status}]"
      ;;

    *)
      printf 'ERROR: invalid argument, try {start/stop}' &>2
      exit 2
      ;;
  esac
}

function start-spinner() {
  if [[ ${-} = *x* || ! -z "${_spinner_pid+x}" ]]; then
    return
  fi
  _message="${1}"
  _display_message 'first'
  _spinner 'start' &
  _buffer="$(mktemp)"
  exec 3>&1 1>"${_buffer}" 2>&1
  _spinner_pid="${!}"
  disown
}

function stop-spinner() {
  if [[ ${-} = *x* || -z "${_spinner_pid+x}" ]]; then
    return
  fi
  exec 1>&3
  _spinner 'stop' "${1}"
  unset _spinner_pid
  cat "${_buffer}"
  rm "${_buffer}"
}
