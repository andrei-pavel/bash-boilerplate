#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

SUCCESS='DONE'
FAIL='FAIL'

_spinner_cycle='⠋⠙⠸⠴⠦⠇'
_spinner_period='0.15s'

function _display_message() {
  printf "\\r%s%$(($(tput cols)-${#_message}-8))s" "${_message}"
}

function _spinner {
  case ${1} in
    start)
      _display_message
      tput civis
      i=1
      while true; do
          printf '\b%s' "${_spinner_cycle:i++%${#_spinner_cycle}:1}"
          sleep ${_spinner_period}
        done
      ;;

    stop)
      tput cvvis
      if [[ -z ${3} ]]; then
          exit 1
      fi
      kill "${3}" > /dev/null 2>&1
      if [[ ${2} == 0 ]]; then
        status="$(printf "${GREEN}%s${RESET}" "${SUCCESS}")"
      else
        status="$(printf "${RED}%s${RESET}" "${FAIL}")"
      fi
      _display_message
      printf '\b[%s]\n' "${status}"
      ;;

    *)
      printf 'ERROR: invalid argument, try {start/stop}' &>2
      exit 2
      ;;
  esac
}

function start_spinner() {
  if [[ ${-} == *x* ]]; then
    return
  fi
  _message="${1}"
  _spinner 'start' &
  _spinner_pid="${!}"
  disown
}

function stop_spinner() {
  local exit_status="${1}"
  _spinner 'stop' "${exit_status}" "${_spinner_pid}"
  unset _spinner_pid
}

# Traps
for t in HUP INT QUIT KILL TERM EXIT; do
  trap "\
    return_code=\${?}
    trap - EXIT
    stop_spinner \${return_code}
    printf \"${t} %s\\n\" \"\${return_code}\" 1>&2
    exit \${return_code}
  " ${t}
done
