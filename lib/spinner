#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

SUCCESS='DONE'
FAIL='FAIL'

_spinner_cycle='⠋⠙⠸⠴⠦⠇'
_spinner_period='0.15s'
_first=true

function _display_message() {
  local status=${1}
  local mode=${2}
  if [[ ${mode} == 'status' ]]; then
    status="[${status}]"
  fi
  full_status="$(printf "%s%$(($(tput cols)-${#_message}-8))s${status}" "${_message}")"
  if ${_first}; then
    printf '%s\n' "${full_status}"
    _first=false
  else
    printf '\e[1A\r%s\n' "${full_status}"
  fi
  if [[ ${mode} == 'status' ]]; then
    printf '\n'
    _first=true
  fi
}

function _spinner {
  case ${1} in
    start)
      tput civis
      i=1
      while true; do
        _display_message "${_spinner_cycle:i++%${#_spinner_cycle}:1}" 'spinning'
        sleep ${_spinner_period}
      done
      ;;

    stop)
      tput cvvis
      if [[ -z ${_spinner_pid} ]]; then
        return 1
      fi
      kill "${_spinner_pid}" > /dev/null 2>&1
      if [[ ${2} == 0 ]]; then
        status="${GREEN}${SUCCESS}${RESET}"
      else
        status="${GREEN}${FAIL}${RESET}"
      fi
      _display_message ${status} 'status'
      ;;

    *)
      printf 'ERROR: invalid argument, try {start/stop}' &>2
      exit 2
      ;;
  esac
}

function start_spinner() {
  if [[ ${-} == *x* ]]; then
    return
  fi
  _message="${1}"
  _display_message
  _spinner 'start' &
  _spinner_pid="${!}"
  disown
}

function stop_spinner() {
  if [[ ${-} == *x* ]]; then
    return
  fi
  _spinner 'stop' "${1}"
  unset _spinner_pid
}
