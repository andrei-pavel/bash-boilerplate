#!/bin/bash

# Copyright (C) 2017-2020 Andrei Pavel, andrei.pavel@mail.com
# Licensed under the MIT License

# Header
SCRIPT_PATH="$(dirname "$(readlink -f "${0}")")"
. "${SCRIPT_PATH}/lib/header"
. "${SCRIPT_PATH}/lib/utils"
. "${SCRIPT_PATH}/lib/spinner"
. "${SCRIPT_PATH}/lib/traps"

argument 'simple' 'approval_required' '-a|--approval' 'whether to ask user for approval'
argument 'valued' 'count' '-n' 'print $count times'
argument 'valued' 'yaml' '-y' 'specify path to the configuration file'
argument 'positional' 'string' 'something other than "Hello, world!" to print'

parse-parameters "${@}"
set -- ${EXTRA_PARAMETERS}

mandatory count

# Default parameters
test -z "${approval_required+x}" && approval_required=false
test -z "${string+x}" && string="Hello, world!"

#------------------------------------------------------------------------------#

# Approval?
if ${approval_required} && ! confirm; then
  exit 0
fi

# Print.
enable-verbose
if test -n "${yaml+x}"; then
  mandatory-command yq
  start-spinner "Printing entries from ${yaml}..."
  for (( i = 0; i < count; ++i )); do
    yq -r '.data | to_entries | map(select(.value != null) | "\(.key) \(.value)") | .[]' < "${yaml}"
  done
  stop-spinner ${?}
else
  start-spinner 'Printing...'
  for (( i = 0; i < count; ++i )); do
    printf '%s\n' "${string}"
  done
  stop-spinner ${?}
fi

if test -n "${this+x}"; then
  printf 'this %s\n' "${this}"
fi

if test -n "${list+x}"; then
  printf 'list: ( '
  for i in $(seq 0 $(( ${#list[@]} - 1 ))); do
    printf '%s ' "${list[${i}]}"
  done
  printf ')\n'
fi

# Show off spinners.
start-spinner 'Nested spinners disable the inner ones...'
start-spinner 'This one...'
start-spinner 'And this one...'
sleep 1s
stop-spinner 0
stop-spinner 0
start-spinner 'And this one...'
sleep 1s
stop-spinner 0
stop-spinner 0

disable-spinners
stop-spinner 0
stop-spinner 0
start-spinner 'Go crazy here!'
start-spinner 'Even order doesn''t count.'
start-spinner 'Spinners are off.'
enable-spinners
